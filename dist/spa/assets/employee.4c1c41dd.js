import{d,r as c,N as y}from"./index.f18b2a00.js";import{api as t}from"./axios.3f6fad34.js";const _=d("employees",()=>{const p=c(null),s=c([]),r=c([]);return{employee:p,employees:s,branchEmployees:r,createEmployee:async o=>{try{const e=await t.post("/api/employee",o);console.log("response employee data",e.data);const a={id:e.data.employee.id,birthdate:e.data.employee.birthdate,address:e.data.employee.address,sex:e.data.employee.sex,status:e.data.employee.status,phone:e.data.employee.phone,employment_type:e.data.employee.employment_type,employment_type_id:e.data.employee.employee_id,firstname:e.data.employee.firstname,middlename:e.data.employee.middlename,lastname:e.data.employee.lastname,position:e.data.employee.position};y.create({type:"positive",message:"User created successfully",position:"top"})}catch(e){console.error("API Error:",e.response?e.response.data:e.message),y.create({type:"negative",message:"Failed to create employee",setTimeout:1e3})}finally{}},searchEmployee:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await t.post(`/api/search-employees?keyword=${o}`);console.log("Raw API Responsessss:",e),e&&e.data&&e.data.length>0?(console.log("Search Resultsssss:",e.data),s.value=e.data):(console.log("No employees found or empty response"),s.value=[])}catch(e){console.error("Error searching employee:",e)}},fetchEmployee:async()=>{const o=await t.get("/api/employee");s.value=o.data},searchEmployeesWithDesignation:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await t.post(`/api/searchEmployeesWithDesignation?keyword=${o}`);console.log("Raw API Response:",e),e&&e.data&&e.data.length>0?(console.log("Search Results:",e.data),s.value=e.data):(console.log("No employees found or empty response"),s.value=[])}catch(e){console.error("Error searching employee:",e)}},fetchAllEmployee:async()=>{const o=await t.get("/api/fetchAllEmployee");s.value=o.data},fetchEmployeeWithEmploymentType:async(o,e,a)=>{const l=await t.get("/api/fetchEmployeeWithEmploymentType",{params:{page:o,per_page:e,search:a}});s.value=l.data,console.log("employees.value",s.value)},searchCertainEmployee:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await t.post(`/api/search-employees?keyword=${o}`);console.log("Raw API Response:",e),e&&e.data&&e.data.length>0?(console.log("Search Results:",e.data),p.value=e.data):(console.log("No employees found or empty response"),p.value=[])}catch(e){console.error("Error searching employee:",e)}},searchEmployeeWithBranchID:async(o,e)=>{console.log("data to be send",o),console.log("data to be send",e);try{const a=await t.post("/api/search-branch-employee",{keyword:o,branch_id:e});r.value=a.data,console.log("Searh branch employee",r.value)}catch(a){console.error("Error searching user with ID:",a),y.create({type:"negative",message:"Failed to search user with ID"})}},updateEmployeeFullname:async o=>{console.log("updateEmployeeFullname",o);const e=o.id;try{const a=await t.put(`/api/update-employee-fullname/${e}`,o);console.log("===================================="),console.log("response",a.data),console.log("====================================");const l=s.value.findIndex(n=>n.id===e);l!==-1&&(s.value[l]={...s.value[l],firstname:a.data.employee.firstname,middlename:a.data.employee.middlename,lastname:a.data.employee.lastname})}catch(a){console.log(a)}},updateEmployeeAddress:async o=>{console.log("updateEmployeeAddress",o);const e=o.id;try{const a=await t.put(`/api/update-employee-address/${e}`,o);console.log("===================================="),console.log("response addresss",a.data),console.log("====================================");const l=s.value.findIndex(n=>n.id===e);l!==-1&&(s.value[l]={...s.value[l],address:a.data.employee.address})}catch(a){console.log(a)}},updateEmployeePhone:async o=>{console.log("updateEmployeePhone",o);const e=o.id;try{const a=await t.put(`/api/update-employee-phone/${e}`,o);console.log("===================================="),console.log("response phone",a.data),console.log("====================================");const l=s.value.findIndex(n=>n.id===e);l!==-1&&(s.value[l]={...s.value[l],phone:a.data.employee.phone})}catch(a){console.log(a)}},updateEmployeebirthdate:async o=>{console.log("updateEmployeebirthdate",o);const e=o.id;try{const a=await t.put(`/api/update-employee-birthdate/${e}`,o);console.log("===================================="),console.log("response birthdate",a.data),console.log("====================================");const l=s.value.findIndex(n=>n.id===e);l!==-1&&(s.value[l]={...s.value[l],birthdate:a.data.employee.birthdate})}catch(a){console.log(a)}},updateEmployeeEmploymentType:async o=>{console.log("updateEmployeeEmploymentTypestore",o);const e=o.id;try{const a=await t.put(`/api/update-employee-employmentType/${e}`,o);console.log("===================================="),console.log("response addresss",a.data),console.log("====================================");const l=s.value.findIndex(n=>n.id===e);l!==-1&&(s.value[l]={...s.value[l],employment_type:a.data.employee.employment_type})}catch(a){console.log(a)}},searchPersonInCharge:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await t.post(`/api/search-employees-person-in-charge?keyword=${o}`);console.log("Raw API Response:",e),e&&e.data&&e.data.length>0?(console.log("Search Results:",e.data),p.value=e.data):(console.log("No employees found or empty response"),p.value=[])}catch(e){console.error("Error searching employee:",e)}}}});export{_ as u};
