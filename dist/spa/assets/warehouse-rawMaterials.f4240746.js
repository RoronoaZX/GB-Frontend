import{d as f,r as o,c as m,P as u,N as l}from"./index.8f20be44.js";import{api as s}from"./axios.a92c2d0c.js";import{u as W}from"./raw-material.215810c9.js";const E=f("warehouseRawMaterials",()=>{const d=o(null),r=o([]),R=o([]),i=o([]),h=o([]),n=o([]),c=o([]),p=o({}),M=e=>{p.value=e},y=W(),g=m(()=>y.rawMaterials);return{setUser:M,setReport:e=>{console.log("report",e),c.value.push(e),n.value=[]},removeReport:e=>{c.value.splice(e,1)},user:p,branch:i,warehouseId:R,branchRecipe:n,branchRawMaterials:h,warehouseRawMaterial:d,warehouseRawMaterials:r,warehouseRawMaterialsReport:c,createWarehouseRawMaterials:async e=>{u.show(),console.log("datassss",e);try{const a=await s.post("/api/warehouse-raw-materials-report",e);if(console.log("responsedfasdfasd",a.data),a.data.message==="Warehouse Raw Materials saved successfully"){const t=g.value.find(v=>v.id===e.raw_material_id),w={...a.data,raw_materials:t||{name:"No Name",code:"Unknown"},total_quantity:e.total_quantity};console.log("newRawMaterials",w),r.value.unshift(w),l.create({type:"positive",message:"Warehouse Raw Materials saved successfully",position:"top"})}else a.data.message==="The RawMaterials already exists in this branch."&&l.create({type:"warning",message:"The Raw Materials already exists in this branch.",position:"top"})}catch(a){console.log(a),l.create({type:"negative",message:"An error occurred while saving the branch product.",position:"top"})}finally{u.hide()}},fetchWarehouseRawMaterials:async e=>{console.log("warehouseId",e);try{const a=await s.get(`/api/warehouse/${e}/rawMaterials`);console.log("responsesss",a.data),r.value=a.data}catch(a){console.log("error",a)}},deleteWarehouseRawMaterials:async e=>{await s.delete(`/api/warehouse-raw-materials-report/${e}`),r.value=r.value.filter(a=>a.id!==e)},searchWarehouseRawMaterials:async(e,a)=>{const t=await s.post("/api/search-warehouse-rawMaterials",{keyword:e,warehouse_id:a});r.value=t.data},warehouseAddSupply:async e=>{console.log("data, ",e);try{const a=await s.post("/api/warehouseRawMaterials-add-supply",e);r.value=a.data,console.log("warehouseRawMaterials save",r)}catch(a){console.error(a)}},fetchBranchUnderWarehouse:async e=>{try{const a=await s.get(`/api/warehouse/${e}/branch`);console.log("responsesss",a.data),i.value=a.data}catch(a){console.log("error",a)}},fetchBranchRawMaterials:async e=>{console.log("branchIdss",e);try{const a=await s.get(`/api/branch/${e}/rawMaterials`);console.log("responsesss",a.data),h.value=a.data}catch(a){console.log("error",a)}},searchBranchRecipe:async(e,a)=>{const t=await s.get("/api/branch-recipe-search",{params:{keyword:e,branch_id:a}});n.value=t.data,console.log("branch recipe",t.data)},saveWarehouseRawMaterialsReport:async()=>{try{console.log("warehouseRawMaterialsReport",c.value);const e=await s.post("/api/warehouse-rawMaterials-report",{reports:c.value});console.log("Report saved successfully:",e.data)}catch(e){e.response&&e.response.data?console.error("Error response:",e.response.data):console.error("Unexpected error:",e)}}}});export{E as u};
