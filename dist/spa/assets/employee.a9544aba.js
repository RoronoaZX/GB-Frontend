import{d as m,r as i,N as p}from"./index.43ab9562.js";import{api as l}from"./axios.8f06cb1d.js";const N=m("employees",()=>{const r=i(null),t=i([]),c=i([]);return{employee:r,employees:t,branchEmployees:c,createEmployee:async o=>{try{const e=await l.post("/api/employee",o);console.log("response employee data",e.data);const s={id:e.data.employee.id,birthdate:e.data.employee.birthdate,address:e.data.employee.address,sex:e.data.employee.sex,status:e.data.employee.status,phone:e.data.employee.phone,employment_type:e.data.employee.employment_type,employment_type_id:e.data.employee.employee_id,firstname:e.data.employee.firstname,middlename:e.data.employee.middlename,lastname:e.data.employee.lastname,position:e.data.employee.position};p.create({type:"positive",message:"User created successfully",position:"top"})}catch(e){console.error("API Error:",e.response?e.response.data:e.message),p.create({type:"negative",message:"Failed to create employee",setTimeout:1e3})}finally{}},searchEmployee:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await l.post(`/api/search-employees?keyword=${o}`);console.log("Raw API Responsessss:",e),e&&e.data&&e.data.length>0?(console.log("Search Resultsssss:",e.data),t.value=e.data):(console.log("No employees found or empty response"),t.value=[])}catch(e){console.error("Error searching employee:",e)}},fetchEmployee:async()=>{const o=await l.get("/api/employee");t.value=o.data},searchEmployeesWithDesignation:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await l.post(`/api/searchEmployeesWithDesignation?keyword=${o}`);console.log("Raw API Response:",e),e&&e.data&&e.data.length>0?(console.log("Search Results:",e.data),t.value=e.data):(console.log("No employees found or empty response"),t.value=[])}catch(e){console.error("Error searching employee:",e)}},fetchAllEmployee:async()=>{const o=await l.get("/api/fetchAllEmployee");t.value=o.data},fetchEmployeeWithEmploymentType:async(o,e,s)=>{const a=await l.get("/api/fetchEmployeeWithEmploymentType",{params:{page:o,per_page:e,search:s}});t.value=a.data,console.log("employees.value",t.value)},searchCertainEmployee:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await l.post(`/api/search-employees?keyword=${o}`);console.log("Raw API Response:",e),e&&e.data&&e.data.length>0?(console.log("Search Results:",e.data),r.value=e.data):(console.log("No employees found or empty response"),r.value=[])}catch(e){console.error("Error searching employee:",e)}},searchEmployeeWithBranchID:async(o,e)=>{console.log("data to be send",o),console.log("data to be send",e);try{const s=await l.post("/api/search-branch-employee",{keyword:o,branch_id:e});c.value=s.data,console.log("Searh branch employee",c.value)}catch(s){console.error("Error searching user with ID:",s),p.create({type:"negative",message:"Failed to search user with ID"})}},updateEmployeeFullname:async o=>{console.log("updateEmployeeFullname",o);const e=o.id;try{const s=await l.put(`/api/update-employee-fullname/${e}`,o);console.log("===================================="),console.log("response",s.data),console.log("====================================");const a=t.value.findIndex(n=>n.id===e);a!==-1&&(t.value[a]={...t.value[a],firstname:s.data.employee.firstname,middlename:s.data.employee.middlename,lastname:s.data.employee.lastname})}catch(s){console.log(s)}},updateEmployeeAddress:async o=>{console.log("updateEmployeeAddress",o);const e=o.id;try{const s=await l.put(`/api/update-employee-address/${e}`,o);console.log("===================================="),console.log("response addresss",s.data),console.log("====================================");const a=t.value.findIndex(n=>n.id===e);a!==-1&&(t.value[a]={...t.value[a],address:s.data.employee.address})}catch(s){console.log(s)}},updateEmployeePhone:async o=>{console.log("updateEmployeePhone",o);const e=o.id;try{const s=await l.put(`/api/update-employee-phone/${e}`,o);console.log("===================================="),console.log("response phone",s.data),console.log("====================================");const a=t.value.findIndex(n=>n.id===e);a!==-1&&(t.value[a]={...t.value[a],phone:s.data.employee.phone})}catch(s){console.log(s)}},updateEmployeebirthdate:async o=>{console.log("updateEmployeebirthdate",o);const e=o.id;try{const s=await l.put(`/api/update-employee-birthdate/${e}`,o);console.log("===================================="),console.log("response birthdate",s.data),console.log("====================================");const a=t.value.findIndex(n=>n.id===e);a!==-1&&(t.value[a]={...t.value[a],birthdate:s.data.employee.birthdate})}catch(s){console.log(s)}},updateEmployeeDesignation:async o=>{console.log("Employee Designation Data in store",o);const e=o.id;try{const s=await l.put(`/api/update-employee-designation/${e}`,o);console.log("===================================="),console.log("response time IN",s.data),p.create({message:"Time designation updated successfully",color:"positive",position:"top",timeout:2e3})}catch(s){console.log(s),p.create({message:"Failed to update designation",color:"negative",position:"top",timeout:2e3})}},updateEmployeeTimeIn:async o=>{console.log("updateEmployeeTimeIn in store",o);const e=o.designation_id;try{const s=await l.put(`/api/update-employee-time-in/${e}`,o);console.log("===================================="),console.log("response time IN",s.data),p.create({message:"Time in updated successfully",color:"positive",position:"top",timeout:2e3})}catch(s){console.log(s),p.create({message:"Failed to update time in",color:"negative",position:"top",timeout:2e3})}},updateEmployeeTimeOut:async o=>{console.log("updateEmployeeTimeOut in store",o);const e=o.designation_id;try{const s=await l.put(`/api/update-employee-time-out/${e}`,o);console.log("===================================="),console.log("response time out",s.data)}catch(s){console.log(s)}},updateEmployeeEmploymentType:async o=>{console.log("updateEmployeeEmploymentTypestore",o);const e=o.employee_id;try{const s=await l.put(`/api/update-employee-employmentType/${e}`,o);console.log("===================================="),console.log("response addresss",s.data),console.log("====================================")}catch(s){console.log(s)}},searchPersonInCharge:async o=>{try{console.log("Searching for employee with keyword:",o);const e=await l.post(`/api/search-employees-person-in-charge?keyword=${o}`);console.log("Raw API Response:",e),e&&e.data&&e.data.length>0?(console.log("Search Results:",e.data),r.value=e.data):(console.log("No employees found or empty response"),r.value=[])}catch(e){console.error("Error searching employee:",e)}},fetchEmployeeWithEmploymentTypeAndDesignation:async(o,e,s)=>{const a=await l.get("/api/fetchEmployeeWithEmploymentTypeAndDesignation",{params:{page:o,per_page:e,search:s}});t.value=a.data,console.log("employees.value",t.value)},fetchCertianEmployeeWithEmploymentTypeAndDesignation:async o=>{const e=await l.get(`/api/fetchCertianEmployeeWithEmploymentTypeAndDesignation/${o}`);t.value=e.data,console.log("employeessssss.value",t.value)}}});export{N as u};
