import{d as l,n,N as t,P as c}from"./index.6a2e76bf.js";import{api as o}from"./axios.eb07d1a5.js";const W=l("warehouses",()=>{const i=n(null),a=n([]);return{warehouse:i,warehouses:a,fetchWarehouses:async()=>{try{const e=await o.get("/api/warehouses");a.value=e.data,console.log("response",e.data)}catch{t.create({type:"negative",message:"Failed to fetch warehouse",setTimeout:1e3})}finally{}},createWarehouses:async e=>{console.log("Data parameters being sent:",e);try{const s=await o.post("/api/warehouses",e);console.log("Response from backend:",s.data),a.value.unshift(s.data),t.create({type:"positive",message:"Warehouse created successfully",setTimeout:1e3})}catch(s){console.error("Error creating warehouse:",s.response?s.response.data:s.message),t.create({type:"negative",message:"Failed to create warehouse",setTimeout:1e3})}},updateWarehouses:async(e,s)=>{c.show();try{const r=await o.put(`/api/warehouses/${e}`,s),u=a.value.findIndex(h=>h.id===e);u!==-1&&(a.value[u]=r.data),t.create({type:"positive",message:"Warehouse updated successfully",setTimeout:1e3})}catch{t.create({type:"negative",message:"Failed to update warehouse",setTimeout:1e3})}finally{c.hide()}},deleteWarehouse:async e=>{c.show();try{const s=await o.delete(`/api/warehouses/${e}`);a.value=a.value.filter(r=>r.id!==e),t.create({type:"positive",message:"Warehouse deleted successfully"})}catch{t.create({type:"negative",message:"Failed to delete warehouse"})}finally{c.hide()}},fetchWarehouseWithEmployee:async()=>{const e=await o.get("/api/fetchWarehouseWithEmployee");a.value=e.data}}});export{W as u};
