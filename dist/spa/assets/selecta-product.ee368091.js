import{d as u,r}from"./index.f4b8fb6f.js";import{api as c}from"./axios.404fe92e.js";const x=u("selectaProduct",()=>{const i=r(null),n=r([]),a=r([]),l=r([]),d=r([]),p=r([]);return{selectaProduct:i,selectaProducts:n,pendingSelectaReports:a,confirmedSelectaReports:l,declinedSelectaReports:d,selectaProductReports:p,searchSelectaProducts:async({branches_id:t,query:e,category:o})=>{console.log(t),console.log(e),console.log(o);try{const s=await c.post("/api/search-selecta-products",{branches_id:t,query:e,category:o});n.value=s.data}catch(s){console.error("Error searching Selecta products:",s)}},createSelectaStocks:async t=>{console.log(t);try{const e=await c.post("/api/selecta-stocks-report",t);n.value=e.data}catch(e){console.log(e)}},fetchPendingSelectaStocks:async(t,e)=>{console.log("branchId",t),console.log("category",e);try{const o=await c.get(`/api/selecta-added-stocks/${t}/pending-reports`,{params:{status:e}});a.value=o.data}catch(o){console.log(o)}},fetchBranchSelectaProduct:async(t,e)=>{console.log("ID",t),console.log("category",e);try{const o=await c.get("/api/fetch-selecta-products",{params:{branches_id:t,category:e}});n.value=o.data,console.log("fetch datasss",o.data)}catch(o){throw console.error("Error fetching branch selecta products:",o),o}},confirmReport:async t=>{console.log("id",t);try{const e=await c.post(`/api/confirm-selecta-report/${t}`);if(e.status===200){const o=a.value.findIndex(s=>s.id===t);o!==-1&&a.value.splice(o,1)}return e.data}catch(e){console.log(e)}},fetchConfirmedSelectaStocks:async(t,e)=>{console.log("branchId",t),console.log("category",e);try{const o=await c.get(`/api/selecta-added-stocks/${t}/confirmed-reports`,{params:{status:e}});l.value=o.data}catch(o){console.log(o)}},fetchDeclinedSelectaStocks:async(t,e)=>{console.log("branchId",t),console.log("category",e);try{const o=await c.get(`/api/selecta-added-stocks/${t}/declined-reports`,{params:{status:e}});d.value=o.data}catch(o){console.log(o)}},fetchSelectaProductReports:async t=>{try{const e=await c.get(`/api/selecta-added-stocks/${t}`);p.value=e.data}catch(e){console.log(e)}},declineReport:async(t,e)=>{console.log("id",t),console.log("remark",e);try{const o=await c.post(`/api/reports/${t}/decline-reports`,{remark:e});if(o.status===200){const s=a.value.findIndex(g=>g.id===t);s!==-1&&a.value.splice(s,1)}return o.data}catch(o){console.log(o)}}}});export{x as u};
