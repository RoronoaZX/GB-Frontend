import{d as W,r as g,c as f,N as t,P as n}from"./index.e27dca24.js";import{u as E}from"./warehouse.b3d4ead3.js";import{api as r}from"./axios.b0b2b682.js";import{u as N}from"./employee.f1a7eca5.js";const z=W("branches",()=>{const c=g(null),s=g([]),w=N();f(()=>w.employees);const b=E(),B=f(()=>b.warehouses);console.log("warehouses",B.value);const v=async a=>{try{console.log("Searching for branch with keyword:",a);const e=await r.post(`/api/search-branch?keyword=${a}`);console.log("Search branch:",e),e&&e.data&&e.data.length>0?(console.log("Search Results:",e.data),c.value=e.data):(console.log("No employees found or empty response"),c.value=[])}catch(e){console.error("Error searching employee:",e)}},l=async()=>{const a=await r.get("/api/branches");s.value=a.data,console.log("response",a.data)};return{branch:c,branches:s,search:v,fetchBranches:l,createBranches:async a=>{console.log("Data parameters being sent:",a);try{const e=await r.post("/api/branches",a);console.log("create branchssss",e),l(),t.create({type:"positive",message:"Branch created successfully",setTimeout:1e3})}catch(e){console.log("error",e),e.response.data.message==="The name has already been taken."?t.create({type:"warning",icon:"warning",message:"The name has already been taken."}):e.response.data.message==="Request failed with status code 422"&&t.create({type:"negative",icon:"error",message:"Request failed with status code 422"})}},updateBranches:async(a,e)=>{var i,p,d,u,y,m;try{n.show();const o=await r.put(`/api/branches/${a}`,e);console.log("response edit",o.data);const S=o.data,h=s.value.findIndex(T=>T.id===a);h!==-1&&(s.value[h]={...s.value[h],...S}),t.create({type:"positive",message:"Branch updated successfully"})}catch(o){console.log("updateBranches",o),((p=(i=o.response)==null?void 0:i.data)==null?void 0:p.message)==="The name has already been taken."?t.create({type:"warning",icon:"warning",message:((u=(d=o.response)==null?void 0:d.data)==null?void 0:u.message)||"Failed to update branch",setTimeout:1e3}):t.create({type:"negative",icon:"error",message:((m=(y=o.response)==null?void 0:y.data)==null?void 0:m.message)||"Failed to update branch",setTimeout:1e3})}finally{n.hide()}},deleteBranches:async a=>{n.show();try{await r.delete(`/api/branches/${a}`),s.value=s.value.filter(e=>e.id!==a),t.create({type:"positive",message:"Branch successfully delete"})}catch{t.create({type:"negative",icon:"error",message:"Failed to delete branch"})}finally{n.hide()}},fetchWarehouseName:async a=>{n.show();try{return(await r.get(`/api/branches/${a}`)).data.name}catch{return null}finally{n.hide()}},fetchBranchesById:async a=>{const e=await r.get(`/api/branches/${a}`);c.value=e.data},fetchBranchWithEmployee:async()=>{const a=await r.get("/api/fetchBranchWithEmployee");s.value=a.data}}});export{z as u};
