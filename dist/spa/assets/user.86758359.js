import{d as p,r as d,N as r,P as c}from"./index.2c8198e3.js";import{api as o}from"./axios.10cbc105.js";const b=p("users",()=>{const t=d([]),n=d([]);return{user:n,users:t,fetchUsers:async()=>{try{const s=await o.get("/api/users");t.value=s.data,console.log("userdataCard",s.data)}catch{r.create({type:"negative",message:"Failed to fetch users"})}},registerUser:async s=>{console.log("userdata",s);try{c.show();const e=await o.post("/api/register",s);console.log("response user data",e.data);const a={id:e.data.user.id,name:e.data.user.name,email:e.data.user.email,birthdate:e.data.user.birthdate,address:e.data.user.address,sex:e.data.user.sex,status:e.data.user.status,phone:e.data.user.phone,role:e.data.user.role,employee_id:e.data.user.employee_id,firstname:e.data.user.firstname,middlename:e.data.user.middlename,lastname:e.data.user.lastname,position:e.data.user.position};t.value.unshift(a),r.create({type:"positive",message:"User created successfully"}),console.log("response",e.data)}catch(e){console.error("User Error message: ",e),r.create({type:"negative",message:"Failed to create user"})}finally{c.hide()}},searchUser:async s=>{try{const e=await o.post("/api/search",{keyword:s});t.value=e.data,console.log("Search user",e.data)}catch(e){console.error("Error searching user:",e),r.create({type:"negative",message:"Failed to search user"})}},searchUserWithID:async(s,e)=>{try{const a=await o.post("/api/search-user-with-branchID",{keyword:s,branch_id:e});t.value=a.data,console.log("Search user with ID",a.data)}catch(a){console.error("Error searching user with ID:",a),r.create({type:"negative",message:"Failed to search user with ID"})}},fetchUserById:async s=>{try{const e=await o.get(`/api/user/${s}`);n.value=e.data,console.log("user dat response",e.data)}catch(e){console.error("Error fetching user:",e),r.create({type:"negative",message:"Failed to fetch users"})}},updateUser:async(s,e)=>{try{console.log("Updating user with ID:",s),console.log("Data to be sent:",e),c.show();const a=await o.put(`/api/update-user-profile/${s}`,e);console.log("user edited response",a.data);const i={...a.data,name:e.name,email:e.email,birthdate:e.birthdate,address:e.address,sex:e.sex,status:e.status,phone:e.phone,role:e.role};console.log("newUser",i.data);const l=t.value.findIndex(u=>u.id===s);l!==-1&&(t.value[l]=i.data),n.value.id===s&&(n.value=i.data),r.create({type:"positive",message:"User updated successfully"}),console.log("Updated user response",a.data)}catch(a){console.error("Error updating user:",a),r.create({type:"negative",message:"Failed to update user"})}finally{c.hide()}},updateEmail:async(s,e)=>{console.log("===================================="),console.log("id",s),console.log("===================================="),console.log("===================================="),console.log("email",e),console.log("====================================");try{const a=await o.put(`/api/user-email/${s}`,{email:e})}catch(a){console.log("error",a)}}}});export{b as u};
